
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocELSEleftORleftANDnonassocEQUALSLTLEGTGENErightPLUSMINUSleftTIMESDIVIDEMODrightUMINUSrightNOTAND ASSIGN BEGIN BOOL COMMA CONCAT DIVIDE DO ELSE END EQUALS EXIT GE GT IDENT IF LE LEN LPAREN LT MINUS MOD NE NOT NUM OR PLUS POS PRINT READINT READSTR RPAREN SEMI STREQ STRING STRNOTEQ SUBSTR THEN TIMES WHILEprogram : instrinstr : instr SEMI simple_instrinstr : simple_instrsimple_instr : assign_stmt\n                    | if_stmt\n                    | while_stmt\n                    | output_stmtsimple_instr : EXITsimple_instr : BEGIN instr ENDassign_stmt : IDENT ASSIGN exprexpr : num_expr\n            | str_exprexpr : IDENTnum_expr : NUMnum_expr : READINTnum_expr : MINUS expr %prec UMINUSnum_expr : expr PLUS expr\n                | expr MINUS expr\n                | expr TIMES expr\n                | expr DIVIDE expr\n                | expr MOD exprnum_expr : LPAREN expr RPARENnum_expr : LEN LPAREN expr RPARENnum_expr : POS LPAREN expr COMMA expr RPARENstr_expr : STRINGstr_expr : READSTRstr_expr : CONCAT LPAREN expr COMMA expr RPARENstr_expr : SUBSTR LPAREN expr COMMA expr COMMA expr RPARENif_stmt : IF bool_expr THEN simple_instrif_stmt : IF bool_expr THEN simple_instr ELSE simple_instrwhile_stmt : WHILE bool_expr DO simple_instrwhile_stmt : DO simple_instr WHILE bool_exprbool_expr : BOOLbool_expr : LPAREN bool_expr RPARENbool_expr : NOT bool_exprbool_expr : bool_expr AND bool_expr\n                 | bool_expr OR bool_exprbool_expr : expr num_rel exprbool_expr : expr str_rel exprnum_rel : EQUALS\n               | LT\n               | LE\n               | GT\n               | GE\n               | NEstr_rel : STREQ\n               | STRNOTEQoutput_stmt : PRINT LPAREN expr RPAREN'
    
_lr_action_items = {'EXIT':([0,9,13,15,42,68,91,],[8,8,8,8,8,8,8,]),'BEGIN':([0,9,13,15,42,68,91,],[9,9,9,9,9,9,9,]),'IDENT':([0,9,11,12,13,15,17,20,21,28,37,41,42,43,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,91,93,94,95,102,],[10,10,25,25,10,10,25,25,25,25,25,25,10,25,25,25,25,25,25,25,25,25,-40,-41,-42,-43,-44,-45,-46,-47,25,25,25,25,10,25,10,25,25,25,25,]),'IF':([0,9,13,15,42,68,91,],[11,11,11,11,11,11,11,]),'WHILE':([0,4,5,6,7,8,9,13,15,19,23,24,25,26,27,31,32,36,39,40,42,47,63,68,72,73,74,75,76,77,78,79,80,81,82,83,88,89,90,91,92,96,100,101,104,],[12,-4,-5,-6,-7,-8,12,12,12,-33,-11,-12,-13,-14,-15,-25,-26,69,-9,-10,12,-35,-16,12,-29,-36,-37,-34,-22,-38,-39,-17,-18,-19,-20,-21,-31,-32,-48,12,-23,-30,-24,-27,-28,]),'DO':([0,9,13,15,19,23,24,25,26,27,31,32,35,42,47,63,68,73,74,75,76,77,78,79,80,81,82,83,91,92,100,101,104,],[13,13,13,13,-33,-11,-12,-13,-14,-15,-25,-26,68,13,-35,-16,13,-36,-37,-34,-22,-38,-39,-17,-18,-19,-20,-21,13,-23,-24,-27,-28,]),'PRINT':([0,9,13,15,42,68,91,],[14,14,14,14,14,14,14,]),'$end':([1,2,3,4,5,6,7,8,19,23,24,25,26,27,31,32,38,39,40,47,63,72,73,74,75,76,77,78,79,80,81,82,83,88,89,90,92,96,100,101,104,],[0,-1,-3,-4,-5,-6,-7,-8,-33,-11,-12,-13,-14,-15,-25,-26,-2,-9,-10,-35,-16,-29,-36,-37,-34,-22,-38,-39,-17,-18,-19,-20,-21,-31,-32,-48,-23,-30,-24,-27,-28,]),'SEMI':([2,3,4,5,6,7,8,16,19,23,24,25,26,27,31,32,38,39,40,47,63,72,73,74,75,76,77,78,79,80,81,82,83,88,89,90,92,96,100,101,104,],[15,-3,-4,-5,-6,-7,-8,15,-33,-11,-12,-13,-14,-15,-25,-26,-2,-9,-10,-35,-16,-29,-36,-37,-34,-22,-38,-39,-17,-18,-19,-20,-21,-31,-32,-48,-23,-30,-24,-27,-28,]),'END':([3,4,5,6,7,8,16,19,23,24,25,26,27,31,32,38,39,40,47,63,72,73,74,75,76,77,78,79,80,81,82,83,88,89,90,92,96,100,101,104,],[-3,-4,-5,-6,-7,-8,39,-33,-11,-12,-13,-14,-15,-25,-26,-2,-9,-10,-35,-16,-29,-36,-37,-34,-22,-38,-39,-17,-18,-19,-20,-21,-31,-32,-48,-23,-30,-24,-27,-28,]),'ELSE':([4,5,6,7,8,19,23,24,25,26,27,31,32,39,40,47,63,72,73,74,75,76,77,78,79,80,81,82,83,88,89,90,92,96,100,101,104,],[-4,-5,-6,-7,-8,-33,-11,-12,-13,-14,-15,-25,-26,-9,-10,-35,-16,91,-36,-37,-34,-22,-38,-39,-17,-18,-19,-20,-21,-31,-32,-48,-23,-30,-24,-27,-28,]),'ASSIGN':([10,],[17,]),'BOOL':([11,12,20,21,43,44,69,],[19,19,19,19,19,19,19,]),'LPAREN':([11,12,14,17,20,21,28,29,30,33,34,37,41,43,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,69,93,94,95,102,],[20,20,37,41,20,20,41,64,65,66,67,41,41,20,20,41,41,41,41,41,41,41,-40,-41,-42,-43,-44,-45,-46,-47,41,41,41,41,20,41,41,41,41,]),'NOT':([11,12,20,21,43,44,69,],[21,21,21,21,21,21,21,]),'NUM':([11,12,17,20,21,28,37,41,43,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,69,93,94,95,102,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-40,-41,-42,-43,-44,-45,-46,-47,26,26,26,26,26,26,26,26,26,]),'READINT':([11,12,17,20,21,28,37,41,43,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,69,93,94,95,102,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-40,-41,-42,-43,-44,-45,-46,-47,27,27,27,27,27,27,27,27,27,]),'MINUS':([11,12,17,20,21,22,23,24,25,26,27,28,31,32,37,40,41,43,44,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,92,93,94,95,97,98,99,100,101,102,103,104,],[28,28,28,28,28,51,-11,-12,-13,-14,-15,28,-25,-26,28,51,28,28,28,51,28,28,28,28,28,28,28,-40,-41,-42,-43,-44,-45,-46,-47,-16,28,28,28,28,28,51,51,-22,51,51,51,51,-19,-20,-21,51,51,51,51,-23,28,28,28,51,51,51,-24,-27,28,51,-28,]),'LEN':([11,12,17,20,21,28,37,41,43,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,69,93,94,95,102,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-40,-41,-42,-43,-44,-45,-46,-47,29,29,29,29,29,29,29,29,29,]),'POS':([11,12,17,20,21,28,37,41,43,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,69,93,94,95,102,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-40,-41,-42,-43,-44,-45,-46,-47,30,30,30,30,30,30,30,30,30,]),'STRING':([11,12,17,20,21,28,37,41,43,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,69,93,94,95,102,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-40,-41,-42,-43,-44,-45,-46,-47,31,31,31,31,31,31,31,31,31,]),'READSTR':([11,12,17,20,21,28,37,41,43,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,69,93,94,95,102,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-40,-41,-42,-43,-44,-45,-46,-47,32,32,32,32,32,32,32,32,32,]),'CONCAT':([11,12,17,20,21,28,37,41,43,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,69,93,94,95,102,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-40,-41,-42,-43,-44,-45,-46,-47,33,33,33,33,33,33,33,33,33,]),'SUBSTR':([11,12,17,20,21,28,37,41,43,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,69,93,94,95,102,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-40,-41,-42,-43,-44,-45,-46,-47,34,34,34,34,34,34,34,34,34,]),'THEN':([18,19,23,24,25,26,27,31,32,47,63,73,74,75,76,77,78,79,80,81,82,83,92,100,101,104,],[42,-33,-11,-12,-13,-14,-15,-25,-26,-35,-16,-36,-37,-34,-22,-38,-39,-17,-18,-19,-20,-21,-23,-24,-27,-28,]),'AND':([18,19,23,24,25,26,27,31,32,35,45,47,63,73,74,75,76,77,78,79,80,81,82,83,89,92,100,101,104,],[43,-33,-11,-12,-13,-14,-15,-25,-26,43,43,-35,-16,-36,43,-34,-22,-38,-39,-17,-18,-19,-20,-21,43,-23,-24,-27,-28,]),'OR':([18,19,23,24,25,26,27,31,32,35,45,47,63,73,74,75,76,77,78,79,80,81,82,83,89,92,100,101,104,],[44,-33,-11,-12,-13,-14,-15,-25,-26,44,44,-35,-16,-36,-37,-34,-22,-38,-39,-17,-18,-19,-20,-21,44,-23,-24,-27,-28,]),'RPAREN':([19,23,24,25,26,27,31,32,45,46,47,63,70,71,73,74,75,76,77,78,79,80,81,82,83,84,92,97,98,100,101,103,104,],[-33,-11,-12,-13,-14,-15,-25,-26,75,76,-35,-16,90,76,-36,-37,-34,-22,-38,-39,-17,-18,-19,-20,-21,92,-23,100,101,-24,-27,104,-28,]),'PLUS':([22,23,24,25,26,27,31,32,40,46,63,70,71,76,77,78,79,80,81,82,83,84,85,86,87,92,97,98,99,100,101,103,104,],[50,-11,-12,-13,-14,-15,-25,-26,50,50,-16,50,50,-22,50,50,50,50,-19,-20,-21,50,50,50,50,-23,50,50,50,-24,-27,50,-28,]),'TIMES':([22,23,24,25,26,27,31,32,40,46,63,70,71,76,77,78,79,80,81,82,83,84,85,86,87,92,97,98,99,100,101,103,104,],[52,-11,-12,-13,-14,-15,-25,-26,52,52,-16,52,52,-22,52,52,52,52,-19,-20,-21,52,52,52,52,-23,52,52,52,-24,-27,52,-28,]),'DIVIDE':([22,23,24,25,26,27,31,32,40,46,63,70,71,76,77,78,79,80,81,82,83,84,85,86,87,92,97,98,99,100,101,103,104,],[53,-11,-12,-13,-14,-15,-25,-26,53,53,-16,53,53,-22,53,53,53,53,-19,-20,-21,53,53,53,53,-23,53,53,53,-24,-27,53,-28,]),'MOD':([22,23,24,25,26,27,31,32,40,46,63,70,71,76,77,78,79,80,81,82,83,84,85,86,87,92,97,98,99,100,101,103,104,],[54,-11,-12,-13,-14,-15,-25,-26,54,54,-16,54,54,-22,54,54,54,54,-19,-20,-21,54,54,54,54,-23,54,54,54,-24,-27,54,-28,]),'EQUALS':([22,23,24,25,26,27,31,32,46,63,76,79,80,81,82,83,92,100,101,104,],[55,-11,-12,-13,-14,-15,-25,-26,55,-16,-22,-17,-18,-19,-20,-21,-23,-24,-27,-28,]),'LT':([22,23,24,25,26,27,31,32,46,63,76,79,80,81,82,83,92,100,101,104,],[56,-11,-12,-13,-14,-15,-25,-26,56,-16,-22,-17,-18,-19,-20,-21,-23,-24,-27,-28,]),'LE':([22,23,24,25,26,27,31,32,46,63,76,79,80,81,82,83,92,100,101,104,],[57,-11,-12,-13,-14,-15,-25,-26,57,-16,-22,-17,-18,-19,-20,-21,-23,-24,-27,-28,]),'GT':([22,23,24,25,26,27,31,32,46,63,76,79,80,81,82,83,92,100,101,104,],[58,-11,-12,-13,-14,-15,-25,-26,58,-16,-22,-17,-18,-19,-20,-21,-23,-24,-27,-28,]),'GE':([22,23,24,25,26,27,31,32,46,63,76,79,80,81,82,83,92,100,101,104,],[59,-11,-12,-13,-14,-15,-25,-26,59,-16,-22,-17,-18,-19,-20,-21,-23,-24,-27,-28,]),'NE':([22,23,24,25,26,27,31,32,46,63,76,79,80,81,82,83,92,100,101,104,],[60,-11,-12,-13,-14,-15,-25,-26,60,-16,-22,-17,-18,-19,-20,-21,-23,-24,-27,-28,]),'STREQ':([22,23,24,25,26,27,31,32,46,63,76,79,80,81,82,83,92,100,101,104,],[61,-11,-12,-13,-14,-15,-25,-26,61,-16,-22,-17,-18,-19,-20,-21,-23,-24,-27,-28,]),'STRNOTEQ':([22,23,24,25,26,27,31,32,46,63,76,79,80,81,82,83,92,100,101,104,],[62,-11,-12,-13,-14,-15,-25,-26,62,-16,-22,-17,-18,-19,-20,-21,-23,-24,-27,-28,]),'COMMA':([23,24,25,26,27,31,32,63,76,79,80,81,82,83,85,86,87,92,99,100,101,104,],[-11,-12,-13,-14,-15,-25,-26,-16,-22,-17,-18,-19,-20,-21,93,94,95,-23,102,-24,-27,-28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instr':([0,9,],[2,16,]),'simple_instr':([0,9,13,15,42,68,91,],[3,3,36,38,72,88,96,]),'assign_stmt':([0,9,13,15,42,68,91,],[4,4,4,4,4,4,4,]),'if_stmt':([0,9,13,15,42,68,91,],[5,5,5,5,5,5,5,]),'while_stmt':([0,9,13,15,42,68,91,],[6,6,6,6,6,6,6,]),'output_stmt':([0,9,13,15,42,68,91,],[7,7,7,7,7,7,7,]),'bool_expr':([11,12,20,21,43,44,69,],[18,35,45,47,73,74,89,]),'expr':([11,12,17,20,21,28,37,41,43,44,48,49,50,51,52,53,54,64,65,66,67,69,93,94,95,102,],[22,22,40,46,22,63,70,71,22,22,77,78,79,80,81,82,83,84,85,86,87,22,97,98,99,103,]),'num_expr':([11,12,17,20,21,28,37,41,43,44,48,49,50,51,52,53,54,64,65,66,67,69,93,94,95,102,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'str_expr':([11,12,17,20,21,28,37,41,43,44,48,49,50,51,52,53,54,64,65,66,67,69,93,94,95,102,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'num_rel':([22,46,],[48,48,]),'str_rel':([22,46,],[49,49,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instr','program',1,'p_program','parser_prim.py',26),
  ('instr -> instr SEMI simple_instr','instr',3,'p_instr_chain','parser_prim.py',33),
  ('instr -> simple_instr','instr',1,'p_instr_single','parser_prim.py',39),
  ('simple_instr -> assign_stmt','simple_instr',1,'p_simple_instr','parser_prim.py',44),
  ('simple_instr -> if_stmt','simple_instr',1,'p_simple_instr','parser_prim.py',45),
  ('simple_instr -> while_stmt','simple_instr',1,'p_simple_instr','parser_prim.py',46),
  ('simple_instr -> output_stmt','simple_instr',1,'p_simple_instr','parser_prim.py',47),
  ('simple_instr -> EXIT','simple_instr',1,'p_simple_instr_exit','parser_prim.py',52),
  ('simple_instr -> BEGIN instr END','simple_instr',3,'p_simple_instr_block','parser_prim.py',57),
  ('assign_stmt -> IDENT ASSIGN expr','assign_stmt',3,'p_assign_stmt','parser_prim.py',64),
  ('expr -> num_expr','expr',1,'p_expr','parser_prim.py',71),
  ('expr -> str_expr','expr',1,'p_expr','parser_prim.py',72),
  ('expr -> IDENT','expr',1,'p_expr_ident','parser_prim.py',77),
  ('num_expr -> NUM','num_expr',1,'p_num_expr_literal','parser_prim.py',84),
  ('num_expr -> READINT','num_expr',1,'p_num_expr_readint','parser_prim.py',89),
  ('num_expr -> MINUS expr','num_expr',2,'p_num_expr_unary','parser_prim.py',94),
  ('num_expr -> expr PLUS expr','num_expr',3,'p_num_expr_binop','parser_prim.py',99),
  ('num_expr -> expr MINUS expr','num_expr',3,'p_num_expr_binop','parser_prim.py',100),
  ('num_expr -> expr TIMES expr','num_expr',3,'p_num_expr_binop','parser_prim.py',101),
  ('num_expr -> expr DIVIDE expr','num_expr',3,'p_num_expr_binop','parser_prim.py',102),
  ('num_expr -> expr MOD expr','num_expr',3,'p_num_expr_binop','parser_prim.py',103),
  ('num_expr -> LPAREN expr RPAREN','num_expr',3,'p_num_expr_group','parser_prim.py',108),
  ('num_expr -> LEN LPAREN expr RPAREN','num_expr',4,'p_num_expr_len','parser_prim.py',113),
  ('num_expr -> POS LPAREN expr COMMA expr RPAREN','num_expr',6,'p_num_expr_pos','parser_prim.py',118),
  ('str_expr -> STRING','str_expr',1,'p_str_expr_literal','parser_prim.py',125),
  ('str_expr -> READSTR','str_expr',1,'p_str_expr_readstr','parser_prim.py',130),
  ('str_expr -> CONCAT LPAREN expr COMMA expr RPAREN','str_expr',6,'p_str_expr_concat','parser_prim.py',135),
  ('str_expr -> SUBSTR LPAREN expr COMMA expr COMMA expr RPAREN','str_expr',8,'p_str_expr_substr','parser_prim.py',140),
  ('if_stmt -> IF bool_expr THEN simple_instr','if_stmt',4,'p_if_stmt','parser_prim.py',147),
  ('if_stmt -> IF bool_expr THEN simple_instr ELSE simple_instr','if_stmt',6,'p_if_stmt_else','parser_prim.py',152),
  ('while_stmt -> WHILE bool_expr DO simple_instr','while_stmt',4,'p_while_stmt','parser_prim.py',157),
  ('while_stmt -> DO simple_instr WHILE bool_expr','while_stmt',4,'p_while_stmt_do','parser_prim.py',162),
  ('bool_expr -> BOOL','bool_expr',1,'p_bool_expr_literal','parser_prim.py',169),
  ('bool_expr -> LPAREN bool_expr RPAREN','bool_expr',3,'p_bool_expr_group','parser_prim.py',174),
  ('bool_expr -> NOT bool_expr','bool_expr',2,'p_bool_expr_not','parser_prim.py',179),
  ('bool_expr -> bool_expr AND bool_expr','bool_expr',3,'p_bool_expr_boolop','parser_prim.py',184),
  ('bool_expr -> bool_expr OR bool_expr','bool_expr',3,'p_bool_expr_boolop','parser_prim.py',185),
  ('bool_expr -> expr num_rel expr','bool_expr',3,'p_bool_expr_num_relop','parser_prim.py',190),
  ('bool_expr -> expr str_rel expr','bool_expr',3,'p_bool_expr_str_relop','parser_prim.py',195),
  ('num_rel -> EQUALS','num_rel',1,'p_num_rel','parser_prim.py',200),
  ('num_rel -> LT','num_rel',1,'p_num_rel','parser_prim.py',201),
  ('num_rel -> LE','num_rel',1,'p_num_rel','parser_prim.py',202),
  ('num_rel -> GT','num_rel',1,'p_num_rel','parser_prim.py',203),
  ('num_rel -> GE','num_rel',1,'p_num_rel','parser_prim.py',204),
  ('num_rel -> NE','num_rel',1,'p_num_rel','parser_prim.py',205),
  ('str_rel -> STREQ','str_rel',1,'p_str_rel','parser_prim.py',210),
  ('str_rel -> STRNOTEQ','str_rel',1,'p_str_rel','parser_prim.py',211),
  ('output_stmt -> PRINT LPAREN expr RPAREN','output_stmt',4,'p_output_stmt','parser_prim.py',218),
]
